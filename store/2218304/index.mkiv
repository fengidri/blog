%title:修改函数的返回地址
%class: compile
\section{call ret}
CPU执行call指令，进行两步操作：
\startitemize
\item 将当前的 IP 或 CS和IP 压入栈中；
\item 跳转
\stopitemize
ret指令用栈中的数据，修改ip的内容，从而实现近转移。


\section{函数的调用流程}
在使用call 进行转移到text段中的新的位置的时候我们要思考的是怎么回来呢?
所以call把当前的IP 压入到栈中, 在函数运行完成之后ret 指令使用栈中的数据修改了IP
寄存器. 就回来了.

这里的问题是这个值是放在栈上的, 哪么问题就是如果这个值被修改了怎么办?
\starttyping
#include <stdio.h>
void foo(){
    long a, *p;
    a=4;
    p = (long *)((void *)&a + 24 );
    *p += 7;
}
int main(){
    int i;
    i = 0;
    foo();
    i = 1;
    printf("The value of i is %d\n", i);
    return 0;
}

\stoptyping
这段代码就是这样的一个功能.通过修改返回地址, 让其它跳过了一i=1这一语句.其结果输
出是:The value of i is 0.

这里在foo 函数中首先要知道保存函数的返回地址的地址. 这个地址在\%rbp 也就是堆栈帧
的上方8节外. 而变量a在堆栈帧的下面, 并且在变量p的下面. 所以从变量a到保存函数返回
地址的地址之间是24个字节.

那么另一个问题是想跳过i=1这一语法我们要跳过多少字节呢? 可以从objdump 中看到.


\section{寄存器}
ebp, rbp: 在32位的环境下是ebp 在64位下是rbp. 这个寄存器是堆栈帧指针.

堆栈帧指针的高位是是上一个堆栈帧指针的值, 函数的返回地址, 函数的实参.

堆栈帧指针的低位是局部变量.

\img{http://i3.tietuku.com/c2b8f7884190e2db.gif}