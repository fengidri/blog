%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Title: linux proc pid maps
%Class: linux
%Post:1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%

/proc/<pid>/maps 显示了进程的虚拟内存的分布状.
    Proc/pid/maps显示进程映射了的内存区域和访问权限。
    对应内核中的操作集为proc_pid_maps_op，具体的导出函数为show_map。
    内核中进程的一段地址空间用一个vm_area_struct结构体表示，
    所有地址空间存储在task->mm->mmap链表中。

\starttable
\NC vm_area_struct项\VL /proc/pid/maps中的项\VL 含义 \AR
\NC vm_start        \VL “-”前一列，如00377000 此段虚拟地址空间起始地址 vm_end “-”后一列，如00390000 \VL 此段虚拟地址空间结束地址AR\AR
\NC vm_flags        \VL 第三列，如r-xp \VL 此段虚拟地址空间的属性。每种属性用一个字段表示，r表示可读，w表示可写，x表示可执行，p和s共用一个字段，互斥关系，p表示私有段，s表示共享段，如果没有相应权限，则用’-’代替AR\AR
\NC vm_pgoff        \VL 第四列，如00000000 \VL 对有名映射，表示此段虚拟内存起始地址在文件中以页为单位的偏移。对匿名映射，它等于0或者vm_start/PAGE_SIZEAR\AR
\NC vm_file->f_dentry->d_inode->i_sb->s_dev \VL 第五列，如fd:00  \VL 映射文件所属设备号。对匿名映射来说，因为没有文件在磁盘上，所以没有设备号，始终为00:00。对有名映射来说，是映射的文件所在设备的设备号AR\AR
\NC vm_file->f_dentry->d_inode->i_ino       \VL 第六列，如9176473 \VL 映射文件所属节点号。对匿名映射来说，因为没有文件在磁盘上，所以没有节点号，始终为00:00。对有名映射来说，是映射的文件的节点号AR\AR
\NC                                         \VL 第七列，如/lib/ld-2.5.so \VL 对有名来说，是映射的文件名。对匿名映射来说，是此段虚拟内存在进程中的角色。[stack]表示在进程中作为栈使用，[heap]表示堆。其余情况则无显示AR\AR

\stoptable

如果程序没有使用 brk 那么在就不会出现 [heap] 的标记. 比如在子进程中使用 malloc 可能在实现上
使用的 mmap 申请的匿名空间. 那么可能就会在 [heap] 下面有一些记录, 但是是匿名的.

而对于 [stack] 是主进程的, 如果有子线程, 会创建一个子线程的栈空间, 还有一个不可读写的保护区, 一般是
4k (页大小). 有可能会显示如[stack:13424].

\section{参考}
\goto{http://blog.csdn.net/lijzheng/article/details/23618365}
