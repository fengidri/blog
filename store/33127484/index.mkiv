%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Title: ATS - buckets and segments
%Class: ats
%Post:1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\starttyping
static void
vol_init_data_internal(Vol *d)
{
  d->buckets = ((d->len - (d->start - d->skip)) / cache_config_min_average_object_size) / DIR_DEPTH;
  d->segments = (d->buckets + (((1<<16)-1)/DIR_DEPTH)) / ((1<<16)/DIR_DEPTH);
  d->buckets = (d->buckets + d->segments - 1) / d->segments;
  d->start = d->skip + 2 *vol_dirlen(d);
}
\stoptyping
\starttyping
int Vol::init(char *s, off_t blocks, off_t dir_skip, bool clear)
{
  dir_skip = ROUND_TO_STORE_BLOCK((dir_skip < START_POS ? START_POS : dir_skip));
  path = ats_strdup(s);
  const size_t hash_id_size = strlen(s) + 32;
  hash_id = (char *)ats_malloc(hash_id_size);
  ink_strlcpy(hash_id, s, hash_id_size);
  const size_t s_size = strlen(s);
  snprintf(hash_id + s_size, (hash_id_size - s_size), " %" PRIu64 ":%" PRIu64 "",
           (uint64_t)dir_skip, (uint64_t)blocks);
  hash_id_md5.encodeBuffer(hash_id, strlen(hash_id));
  len = blocks * STORE_BLOCK_SIZE;
  ink_assert(len <= MAX_VOL_SIZE);
  skip = dir_skip;
  prev_recover_pos = 0;

  // successive approximation, directory/meta data eats up some storage
  start = dir_skip;
  vol_init_data(this);
  data_blocks = (len - (start - skip)) / STORE_BLOCK_SIZE;
  hit_evacuate_window = (data_blocks * cache_config_hit_evacuate_percent) / 100;

  evacuate_size = (int) (len / EVACUATION_BUCKET_SIZE) + 2;
  int evac_len = (int) evacuate_size * sizeof(DLL<EvacuationBlock>);
  evacuate = (DLL<EvacuationBlock> *)ats_malloc(evac_len);
  memset(evacuate, 0, evac_len);

  Debug("cache_init", "allocating %zu directory bytes for a %lld byte volume (%lf%%)",
    vol_dirlen(this), (long long)this->len, (double)vol_dirlen(this) / (double)this->len * 100.0);
  raw_dir = (char *)ats_memalign(ats_pagesize(), vol_dirlen(this));
  dir = (Dir *) (raw_dir + vol_headerlen(this));
  header = (VolHeaderFooter *) raw_dir;
  footer = (VolHeaderFooter *) (raw_dir + vol_dirlen(this) - ROUND_TO_STORE_BLOCK(sizeof(VolHeaderFooter)));

#if TS_USE_INTERIM_CACHE == 1
  num_interim_vols = good_interim_disks;
  ink_assert(num_interim_vols >= 0 && num_interim_vols <= 8);
  for (int i = 0; i < num_interim_vols; i++) {
    double r = (double) blocks / total_cache_size;
    off_t vlen = off_t (r * g_interim_disks[i]->len * STORE_BLOCK_SIZE);
    vlen = (vlen / STORE_BLOCK_SIZE) * STORE_BLOCK_SIZE;
    off_t start = ink_atomic_increment(&g_interim_disks[i]->skip, vlen);
    interim_vols[i].init(start, vlen, g_interim_disks[i], this, &(this->header->interim_header[i]));
    ink_assert(interim_vols[i].start + interim_vols[i].len <= g_interim_disks[i]->len * STORE_BLOCK_SIZE);
  }
#endif

  if (clear) {
    Note("clearing cache directory '%s'", hash_id);
    return clear_dir();
  }

  init_info = new VolInitInfo();
  int footerlen = ROUND_TO_STORE_BLOCK(sizeof(VolHeaderFooter));
  off_t footer_offset = vol_dirlen(this) - footerlen;
  // try A
  off_t as = skip;
  if (is_debug_tag_set("cache_init"))
    Note("reading directory '%s'", hash_id);
  SET_HANDLER(&Vol::handle_header_read);
  init_info->vol_aio[0].aiocb.aio_offset = as;
  init_info->vol_aio[1].aiocb.aio_offset = as + footer_offset;
  off_t bs = skip + vol_dirlen(this);
  init_info->vol_aio[2].aiocb.aio_offset = bs;
  init_info->vol_aio[3].aiocb.aio_offset = bs + footer_offset;

  for (unsigned i = 0; i < countof(init_info->vol_aio); i++) {
    AIOCallback *aio = &(init_info->vol_aio[i]);
    aio->aiocb.aio_fildes = fd;
    aio->aiocb.aio_buf = &(init_info->vol_h_f[i * STORE_BLOCK_SIZE]);
    aio->aiocb.aio_nbytes = footerlen;
    aio->action = this;
    aio->thread = AIO_CALLBACK_THREAD_ANY;
    aio->then = (i < 3) ? &(init_info->vol_aio[i + 1]) : 0;
  }
#if AIO_MODE == AIO_MODE_NATIVE
  ink_assert(ink_aio_readv(init_info->vol_aio));
#else
  ink_assert(ink_aio_read(init_info->vol_aio));
#endif
  return 0;
}
\stoptyping