%title: 一致性hash 算法
\section{基本需求}
对于key-value 系统, 并且cache 服务器有多台.
当要保存一对key-value时, 我们可以把这个信息保存在其中一台服务器上也可以是多台.
但是当我想要得到这个key 时, 问题就来了, 我到哪一台服务器上去找到这个key.

\section{基本解法}
为了在set与get的时候可以到同一台服务器上操作. 那么就要在key与服务器之间进
行对应. key与服务器之间的对应关系是一对多的.

一个简单的思路是:

\starttyping
X = hash(key)%N
\stoptyping
X:服务器的序号 
N:服务器的总数

这样就解决了key在多个cache上的分布情况. 

\section{需求提升}
1. 一个 cache 服务器 down 掉了（在实际应用中必须要考虑这种情况），这样所有映射
到 cache  的对象都会失效，怎么办，需要把 cache  从 cache 列表中移除，这时候 cache
是 N-1 台，映射公式变成了 
\starttyping
hash(Key)%(N-1) ；
\stoptyping

2. 由于访问加重，需要添加 cache ，这时候 cache 是 N+1 台，映射公式变成了
\starttyping
hash(key)%(N+1) ；
\stoptyping

这样的算法所带来的问题在于, 当cache 服务器发生变化的时候, key与服务器的对应关系
基本都发生了变化.

\section{consistent hashing 算法(一致性Hash)}
一致性算法是为了解决X与key或都说是Hash(key) 之间的关系. 
把服务器的编号进行hash运算得到F=Hash(X).
考虑把hash 的结果的集合按一定的规律排成一个圆.
F 也在这个圆上, 当得到Hash(key) 之后我们在这个圆上顺序时针(或逆时针)找到最边的F.
这样完成key与X的对应关系. 

服务器发生变化时只在很小的范围内会发生对应关系的变化.


\section{虚拟节点}

为了提高服务的分布的平衡性. 通过增加节点的方法. 一个服务器可以对应多个节点. 

\section{说明}
\startitemize
\item  单调性(Monotonicity): 单调性是指如果已经有一些内容通过哈希分派到了相应的
缓冲中，又有新的缓冲加入到系统中。哈希的结果应能够保证原有已分配的内容可以被映射
到新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区。

\item  平衡性: 平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得
所有的缓冲空间都得到利用。

\item  虚拟节点: 实际节点在 hash 空间的复制品（ replica ），一实际个节点对应了若
干个“虚拟节点”，这个对应个数也成为“复制个数”，“虚拟节点”在 hash 空间中以
hash 值排列。
\stopitemize

























