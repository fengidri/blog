%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Title: ATS - 多级缓存
%Class: ats
%Post:1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\def\ats{ Traffic Server }
\def\parent{ parent\ }
\def\child{ child }
\def\icp{ICP}

\section{介绍}
多级缓存由相互可以通信的多层缓存组成.
\ats 支持多种多级缓存.
所有的多级缓存都使用 \parent 与\child 的概念.
\parent 在多级缓存中位于比较高的位置, 可以
传递请求, 而\child 是针对于那些\parent 而言的.

\section{\parent Caching}
\ats 如果在本身的缓存中还能找到请求的资源,
在最终向源站请求数据之前可以向\parent 缓存查找.
你可以给一个\ats 配制多个\parent cache,
这样的话, 如果一个\parent 不可用了, 其它的
会依次检查其它的 \parent cache 直到可以找到,
或没有更多的\parent cache, 亦或者联系到了源站.
\ats \parent cache 同时支持 HTTP 或 HTTPS 请求.

如果你不想所有的请求都检查\parent cache. 可以简单地配置\ats 把
某些请求(比如这些请求中包含有指定的 URLs)定向到源站.
这可以在\bold{parent.config} 中进行设置.

下图显示了设置有一个\parent cache 的缓存的工作过程.
这个请求中, 一个用户发送了一个请求给\ats 节点, 这个节点在多级缓存中
是一个 child (因为它被配置为, 当请求查找失败的时候, 向\parent 进行
查找). 用户的请求资源是 MISS, 所以 \ats 会把请求重定向到\parent cache,
并在\parent cache 里命中了. \parent 把内容发送给了\ats, \ats 会把
资源进行缓存并把内容发送给用户.
后续针对这个资源的请求会直接从\ats 的缓存中返回数据(直接数据过期).
\img{http://i3.tietuku.com/f4a25803e9c0c7e5.jpg}

如果\parent 也是 MISS , 那么 \parent 会从源站取回数据(或者从其它的缓存,
这要看\parent 的配置了).


\subsection{\parent 故障转移 }
\ats 支持同时使用多个\parent cache.
这保证了, 如果一个\parent cache 不能使用, 其它的
\parent 也可以提供服务.

当胸给\ats 配制了多个\parent cache, 当\ats 探测到一个\parent 能不能使用,
\ats 会把请求发送给其它的\parent cache.
当你设置有多个\parent cache, 那么查询的顺序是依赖于在\bold{
parent.config
} 默认情况下, \parent cache 会按照在配置文件中的顺序中进行查询.

\subsection{为\ats 配置一个\parent cache}
为\ats 配置一个\parent cache, 要进行以下的配置.

你只用配置\child cache.
假设\parent 节点配置了与\child 相同的源站. 不用为\parent 节点进行配置.


\startitemize
\item 开启 \parent cache 功能
    \starttyping
    CONFIG proxy.config.http.parent_proxy_routing_enable INT 1g
    \stoptyping

\item  配置你想要使用做为处理 miss 请求的\parent cache.
当使用\parent 故障转移, 你应该配置多个\parent cache, 这样
当\parent cache 不可用的时候, 请求会重定向到其它的\parent cache.

\item \bold{parent.config} 设置了\parent 代理规则, 这些规则指定了
你要用于处理 miss 请求的\parent cache.
\stopitemize

下面的例子, 配置\ats 处理所有包含有规则\bold{politics}
并且url 以\bold{/viewpoint} 开头的请求直接到源站.

\starttyping
url_regex=politics prefix=/viewpoint go_direct=true
\stoptyping

下面的例子配置\ats 把所有以\bold{http://host1}开头的
的 miss 请求 到\bold{parent1}. 如果\bold{parent1}
不能处理请求, 然后请求会转到\bold{parent2}.
因为 \bold{round-robin=true}, \ats 会基于用户的ip
循环到\parent cache.
\starttyping
dest_host=host1 scheme=http parent="parent1;parent2" round-robin=strict
\stoptyping

\section{对等的\icp}
\icp (The Internet Cache Protocol ) 被多个缓存之间用于交换内容信息.
\icp 查询信息用于询问其它的缓存, 它们有没有存储特定的 URL 资源.
\icp 响应 hit 或 miss.
缓存\icp 信息只在 \icp 节点之间进行交换, 可以接收 \icp 信息
的是相邻的缓存.
一个\icp 节点可以是一个兄弟缓存(处于多级缓存的同一层)
也可以是一个父缓存(处于多级缓存的高一层).

如果\ats 开启了\icp 功能, 它会在缓存miss 的时候发送\icp 查询给它的
对等节点.
如果没有命中, 但是设置了\parent, 那么使用循环策略选择\parent。
If no ICP parents exist, then Traffic Server forwards the request to its HTTP parents.
如果没有\parent HTTP缓存连接, 然后\ats将请求转发到原始服务器。

如果\ats 从一个\icp 节点收到一个 命中的信息, 然后\ats 会发送
HTTP 请求到\icp 节点.
However, it might turn out to be a cache miss because the original HTTP request contains header information that is not communicated by the ICP query.
然而: 可能会变成一个 cache miss, 因为 \icp 并没有交换 原始请求中的
头信息.
例如: 命中了, 但是并不是请求的备份.
如果 \icp 变成了 miss, 那么\ats 会中转请求到 HTTP 父cache 或 源站.

要配置\ats 的\icp 功能, 那么执行以下操作:
\startitemize
\item 确定一个\ats 服务是不是只可以接收 \icp 信息, 或它可以同时接收
发送 \icp .

\item 确定\ats 可以发送信息直接到每一个\icp 节点, 或通过组播通道发送
消息.
\item 指定 \icp 端口
\item 设置\icp 请求 timeout
\item 确定在\ats \icp 通信中身份(兄弟 或 父)
\stopitemize


要配置如下选项:
\startitemize
\item proxy.config.icp.enabled
\item proxy.config.icp.icp_port
\item proxy.config.icp.multicast_enabled
\item proxy.config.icp.query_timeout
\stopitemize

在配置文件目录中配置\bold{icp.config}, 对于每一个\icp 节点,
在\bold{icp.config} 中设置对应的规则.



