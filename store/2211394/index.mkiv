%title:cottle
%class: python
\section{说明}
cottle 的设计灵感来自于bottle与web.py.
bottle是一个优秀的小型的web框架. web.py也是一个优秀的框架.
web.py一个吸引我的地方在于使用类来处理一个url. 不同的请求方法
对应于类的不同的处理方法.  这让我感觉与restful 思想非常接近. 并且
我感觉可能在类的应用上更进一步, 从而发挥出类的更多的特性, 也可以更加完整地体现restful 思想.

另一个方面bottle 对于web的底层处理让我非常着迷. 处理非常优雅.

所以我在bottle的源代码的基础上整合进了web.py的类处理风格. 并进一步
利用了类的处理方式带来的便利.

这与bottle 的方向是完全不同的所以没有进行整个进bottle, 而是试着写一个
完全新的web框架.

在bottle 与web.py 中对于一些底层的信息的获得是通过一些引用一些其它的方法得到的.
如bottle 中非常优秀的设计request与response. web.py中的ctx.  但是如果把这些对象直接
绑定到回调类上可能是一个更好的方法, 不是吗?

同时注意到一件事, web.py中对于类的实例是在每一次请求中实现的. 但是我更加喜欢在程序起来的是时候,
把所有的回调用到的类都实例化. 在我看来这是一种优化. 同时对于同一个url 的多次请求之间可以
保存一些信息, 而不用在全局的范围里保存数据. 如请求计数器, 可以很方便地把计数器保存在实例中.


\section{布署}


\section{接口说明}
\subsection{handle}
所有应用上对于url的处理类应该继承自这个类.

\startitemize
\item  [Before]
在调用GET, POST, PUT 这些http 请求方法之前会调用Before方法. 如果这个
方法的返回值不是True, 则不会调用处理方法. Before 中应该自己处理返回情况.

\item[After]
在调用完成处理方法之后调用.

\item[query] url 中的请求参数

\item[env] wsgi 参数

\item [forms] post, put 提交的body的内容. 如果有指明是json, 则会自解析后
返回.

\item [abort] 异常响应.
\item [ redirect] 重定向.
\item [ set_content_json] 设置返回值是json 数据.
\item [cfile] 返回静态文件.
\starttyping
    def cfile(self, filename, root, mimetype='auto', download=False,
            charset='UTF-8'):
\stoptyping
\startitemize
\item  [filename] 文件名
\item [ root] 文件路径
\item [mimetype] 文件的类型
\item [ download] 是否开启下载
\item [charset] 编码
\stopitemize



\stopitemize


\section{session}
会话用于表达多次请求是由同一个用户发起的. 在一次请求中通过会话可以得到当前的请求的用户的相关信息.
而表示同一用户是通过给用户一个cookie来完成的.

并且有必要把这些数据保存在主机上. 另一方面一般而言会话会有时间性. 如果超时, 那么与没有找到cookie 的处理应该是相同.
做如下的设计:


\startitemize
\item  [login]  注意session 的创建. 这个方法的返回值如果是真, 则会创建session. 这个方法由用于自己实现. 只对于返回值有要求.
                注意其参数是request对象. 这个对象中包含有所有的用户提交的信息. 可以通过这些信息完成login的处理.
\item [_check]  这个用于检查session的合法性. 如时间的有效性. 这个方法应该不被用户修改.
\item [check]   当通过了_check, 那么就可以认为session是有效的. 这只是完成了对于所有的用户的检查. 但是实际中, 不同的
              url对于用户也是有要求的.  这体现是的是权限上的划分. 这部分的实现可以在每一个handle里实现. 但是如果有很好的
              权限的划分在session里实现也是一个很好的方法.

              默认的情况下handle.pam是None. 当handle.pam 不是None 的时候. 会调用session的check 方法, 并以handle.pam 做为参数传递进去.

              注意对于check 的调用是在Before 的调用之前的.


\stopitemize




\section{bugs}
\subsection{cookies 在static_file 失效}
当设置了cookies里, 但是如果最后是使用static_file 进行返回, 那么cookies可能失效.

这样的设计是有其目的的, wsgi中对于文件的返回有特别的处理方法. 在bottle 中
会检查wsgi.file_wrapper, 如果存在就调用其接口进行处理. 如果没有, bottle中
有一个现成的处理方法. 这个方法中并不会调用reponse的相关信息.

从逻辑上讲这做比较切合实际的情况. 文件的返回好像没有必要设置cookie.
如果有必要的话, 可以在302跳转中设置cookies, 再跳转到文件的url上.