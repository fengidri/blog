%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Title: ATS - Transform
%Class: ats
%Post:1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
\def\ats{ATS}
\def\tf{Transfom}
\def\vcon{Vconn}

我以为 \ats 的\tf 机制有一些复杂, 对一个只在 \ats 里会出现的机制
没有必要这样复杂, 可以把底层更加开放一点.

不管如何还是说一说吧. 概念上的东西, 以前已经有过说明.
这里关注一些细节.

我们知道\tf 是由多个\vcon 连接而成的. 那么第一个\vcon 的nbytes 是怎么来的.
可以知道, 如果 upstream 带有 content-length, 那么这个nbytes 当然可以从这里
来, 但是如果upstream 是一个chunked 的响应会如何的. 我实验了一下,
nbytes 在chunked 的情况下一开始的值是9223372036854775807 也就是
64 位的最大值. 这样可以想像 ats 对这个处理就是使用了一个假定的值.
如果 ats 实现地足够好的话, 应该会在实际的大小超出的的情况下再进行一下
反弹就好了.